# ==========================================
# ARQUIVO: .env.example
# ==========================================

# Configura√ß√µes da IA Avan√ßada
AI_API_URL=https://ia-trading-bot-nrn1.onrender.com
AI_API_KEY=seu_api_key_aqui

# Configura√ß√µes Deriv API
DERIV_WS_URL=wss://ws.derivws.com/websockets/v3?app_id=1089
DERIV_API_TOKEN="cNAlmhMbfcfbTu0"

# Configura√ß√µes do App
NODE_ENV=development
ELECTRON_ENABLE_LOGGING=true
ELECTRON_ENABLE_STACK_DUMPING=true

# Configura√ß√µes de Trading
DEFAULT_STAKE=1.00
DEFAULT_SYMBOL=R_50
MARTINGALE_MAX_LEVEL=8
AUTO_SAVE_INTERVAL=30000

# Configura√ß√µes de Desenvolvimento
DEBUG_MODE=false
SHOW_DEV_TOOLS=false
HOT_RELOAD=true

# ==========================================
# ARQUIVO: test/basic.test.js
# ==========================================

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

describe('üß™ IA DERIV Avan√ßada - Testes B√°sicos', () => {
  
  test('‚úÖ Arquivos principais existem', () => {
    const requiredFiles = [
      'main.js',
      'preload.js', 
      'index.html',
      'package.json'
    ];
    
    requiredFiles.forEach(file => {
      expect(fs.existsSync(file)).toBe(true);
      console.log(`‚úÖ ${file} existe`);
    });
  });
  
  test('‚úÖ Sintaxe JavaScript v√°lida', () => {
    const jsFiles = ['main.js', 'preload.js'];
    
    jsFiles.forEach(file => {
      expect(() => {
        require(path.join(process.cwd(), file));
      }).not.toThrow();
      console.log(`‚úÖ ${file} sintaxe OK`);
    });
  });
  
  test('‚úÖ package.json v√°lido', () => {
    const packageJson = require('../package.json');
    
    expect(packageJson.name).toBe('ia-deriv-avancada');
    expect(packageJson.main).toBe('main.js');
    expect(packageJson.scripts.start).toBeDefined();
    expect(packageJson.scripts['build-win']).toBeDefined();
    
    console.log('‚úÖ package.json estrutura OK');
  });
  
  test('‚úÖ Depend√™ncias instaladas', () => {
    expect(fs.existsSync('node_modules')).toBe(true);
    expect(fs.existsSync('node_modules/electron')).toBe(true);
    expect(fs.existsSync('node_modules/electron-builder')).toBe(true);
    
    console.log('‚úÖ Depend√™ncias principais instaladas');
  });
  
  test('‚úÖ Assets criados', () => {
    expect(fs.existsSync('assets')).toBe(true);
    
    if (fs.existsSync('assets/icon.svg')) {
      console.log('‚úÖ √çcone SVG criado');
    }
  });
  
  test('‚è±Ô∏è App inicia sem erros cr√≠ticos (timeout 30s)', async () => {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        if (electronProcess && !electronProcess.killed) {
          electronProcess.kill();
        }
        reject(new Error('Timeout: App n√£o iniciou em 30 segundos'));
      }, 30000);
      
      const electronProcess = spawn('npx', ['electron', '.', '--test-mode'], {
        stdio: 'pipe',
        detached: false
      });
      
      let hasStarted = false;
      
      electronProcess.stdout.on('data', (data) => {
        const output = data.toString();
        console.log('STDOUT:', output);
        
        if (output.includes('IA DERIV') || output.includes('Electron')) {
          hasStarted = true;
          clearTimeout(timeout);
          electronProcess.kill();
          resolve();
        }
      });
      
      electronProcess.stderr.on('data', (data) => {
        const error = data.toString();
        console.log('STDERR:', error);
        
        // Ignorar avisos n√£o cr√≠ticos
        if (!error.includes('WARNING') && !error.includes('deprecated')) {
          clearTimeout(timeout);
          electronProcess.kill();
          reject(new Error(`Erro cr√≠tico: ${error}`));
        }
      });
      
      electronProcess.on('close', (code) => {
        clearTimeout(timeout);
        if (!hasStarted && code !== 0) {
          reject(new Error(`App fechou com c√≥digo ${code}`));
        } else if (hasStarted) {
          resolve();
        }
      });
    });
  }, 35000);
  
});

console.log('üöÄ Executando testes do IA DERIV Avan√ßada...');

# ==========================================
# ARQUIVO: docs/TECHNICAL.md
# ==========================================

# üìã Documenta√ß√£o T√©cnica - IA DERIV Avan√ßada

## üèóÔ∏è Arquitetura do Sistema

### Processo Principal (Main Process)
- **Arquivo**: `main.js`
- **Responsabilidade**: Gerenciamento de janelas, menus, armazenamento local
- **Tecnologias**: Electron Main, Node.js APIs

### Processo Renderizador (Renderer Process)  
- **Arquivo**: `index.html` + JavaScript integrado
- **Responsabilidade**: Interface usu√°rio, l√≥gica de trading, IA
- **Tecnologias**: HTML5, CSS3, JavaScript ES6+

### Bridge de Seguran√ßa
- **Arquivo**: `preload.js`
- **Responsabilidade**: Comunica√ß√£o segura entre Main e Renderer
- **Seguran√ßa**: Context isolation, IPC restrito

## üß† Sistema de IA Avan√ßada

### Q-Learning
```javascript
Estado = {
  s√≠mbolo: string,
  volatilidade: number,
  hor√°rio: number,
  resultado_anterior: boolean
}

A√ß√£o = "CALL" | "PUT" | "WAIT"
Recompensa = P&L_do_trade
```

### Invers√£o Adaptativa
- **Threshold Inicial**: 3 erros consecutivos
- **Adapta√ß√£o**: Baseada na performance hist√≥rica
- **L√≥gica**: Se erros >= threshold ‚Üí inverter sinais

### Aprendizado Cont√≠nuo
- **Temporal**: Padr√µes por hor√°rio/dia
- **Sequencial**: Sequ√™ncias de trades
- **Correlacional**: Rela√ß√µes entre s√≠mbolos

## üîó Integra√ß√£o APIs

### Deriv WebSocket API
```javascript
const ws = new WebSocket('wss://ws.derivws.com/websockets/v3?app_id=1089');

// Autentica√ß√£o
ws.send(JSON.stringify({ authorize: token }));

// Trading
ws.send(JSON.stringify({
  buy: 1,
  price: stake,
  parameters: {
    contract_type: "CALL",
    symbol: "R_50",
    duration: 5,
    duration_unit: "t"
  }
}));
```

### IA Avan√ßada API
```javascript
const response = await fetch('https://ia-trading-bot-nrn1.onrender.com/signal', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${API_KEY}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(marketData)
});
```

## üíæ Armazenamento de Dados

### Electron Store
```javascript
const Store = require('electron-store');
const store = new Store({
  defaults: {
    apiToken: '',
    martingaleSettings: {},
    aiSettings: {},
    tradingHistory: []
  }
});
```

### Estrutura de Dados
```
%APPDATA%/ia-deriv-config/
‚îú‚îÄ‚îÄ config.json          # Configura√ß√µes principais
‚îú‚îÄ‚îÄ trading-history.json # Hist√≥rico de trades
‚îú‚îÄ‚îÄ ai-learning-data.json # Dados de aprendizado IA
‚îî‚îÄ‚îÄ logs/                # Logs da aplica√ß√£o
```

## üõ°Ô∏è Sistema Anti-Duplica√ß√£o

### Controles Rigorosos
```javascript
let orderLock = false;
let hasActiveOrder = false;
let processingOrder = false;
let orderCooldown = false;

function canPlaceNewOrder() {
  return !orderLock && !hasActiveOrder && 
         !processingOrder && !orderCooldown;
}
```

### Timeouts e Cleanup
- **Order Timeout**: 5 minutos para finaliza√ß√£o
- **Cooldown**: 3 segundos entre ordens
- **Force Cleanup**: Reset completo se necess√°rio

## üé∞ Sistema Martingale

### Progress√£o
```javascript
const martingaleState = {
  level: 0,          // N√≠vel atual (0-8)
  baseStake: 1.00,   // Stake base
  maxLevel: 8,       // M√°ximo permitido
  multiplier: 2      // Multiplicador (2x)
};

// C√°lculo pr√≥ximo stake
nextStake = baseStake * Math.pow(multiplier, level);
```

### Reset Autom√°tico
- **WIN**: Reset imediato para n√≠vel 0
- **MAX LEVEL**: Reset for√ßado por seguran√ßa

## üîß Build e Distribui√ß√£o

### Electron Builder
```json
{
  "win": {
    "target": ["nsis", "portable", "zip"],
    "arch": ["x64", "ia32"]
  },
  "nsis": {
    "oneClick": false,
    "allowToChangeInstallationDirectory": true
  }
}
```

### Artefatos Gerados
- `IA-DERIV-Avancada-Setup-1.0.0.exe` - Instalador
- `IA-DERIV-Avancada-Portable-1.0.0.exe` - Port√°til
- `IA-DERIV-Avancada-1.0.0-x64.exe` - 64-bit
- `IA-DERIV-Avancada-1.0.0-ia32.exe` - 32-bit

## üêõ Debug e Logs

### Development Tools
```bash
# Modo desenvolvimento
npm run dev

# Debug main process
--inspect=9229

# Debug renderer
F12 (DevTools)
```

### Logging
```javascript
console.log('üöÄ Info');
console.warn('‚ö†Ô∏è Warning'); 
console.error('‚ùå Error');
```

## üìä M√©tricas e Monitoramento

### KPIs Principais
- **Win Rate**: Taxa de acerto dos trades
- **P&L**: Lucro/Preju√≠zo acumulado
- **Sharpe Ratio**: Rela√ß√£o risco/retorno
- **Drawdown**: Maior perda consecutiva

### Coleta de Dados
```javascript
const sessionStats = {
  totalTrades: 0,
  wonTrades: 0,
  lostTrades: 0,
  totalPnL: 0,
  startBalance: 0
};
```

## üîí Seguran√ßa

### Context Isolation
```javascript
// preload.js
contextBridge.exposeInMainWorld('electronAPI', {
  // APIs seguras apenas
});
```

### CSP (Content Security Policy)
```html
<meta http-equiv="Content-Security-Policy" 
      content="default-src 'self'; 
               connect-src 'self' wss://ws.derivws.com https://ia-trading-bot-nrn1.onrender.com;">
```

### Valida√ß√£o de Dados
- Sanitiza√ß√£o de inputs
- Valida√ß√£o de tokens
- Verifica√ß√£o de integridade

## üöÄ Performance

### Otimiza√ß√µes
- Lazy loading de componentes
- Debounce em eventos frequentes
- Cache de dados da IA
- Cleanup autom√°tico de mem√≥ria

### Monitoramento
```javascript
// Uso de mem√≥ria
process.memoryUsage();

// Performance timing
console.time('opera√ß√£o');
// ... c√≥digo
console.timeEnd('opera√ß√£o');
```

# ==========================================
# ARQUIVO: .eslintrc.js
# ==========================================

module.exports = {
  env: {
    browser: true,
    commonjs: true,
    es6: true,
    node: true
  },
  extends: [
    'eslint:recommended'
  ],
  globals: {
    electronAPI: 'readonly',
    tradingConfig: 'readonly'
  },
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module'
  },
  rules: {
    'indent': ['error', 2],
    'linebreak-style': ['error', 'windows'],
    'quotes': ['error', 'single'],
    'semi': ['error', 'always'],
    'no-console': 'off',
    'no-unused-vars': ['warn', { 
      "argsIgnorePattern": "^_" 
    }],
    'no-undef': 'error',
    'prefer-const': 'error',
    'no-var': 'error'
  },
  ignorePatterns: [
    'node_modules/',
    'dist/',
    'build/',
    '*.min.js'
  ]
};

# ==========================================
# ARQUIVO: CONTRIBUTING.md
# ==========================================

# ü§ù Contribuindo para IA DERIV Avan√ßada

## üéØ Como Contribuir

### 1. üç¥ Fork do Reposit√≥rio
```bash
git clone https://github.com/seu-usuario/ia-deriv-avancada.git
cd ia-deriv-avancada
```

### 2. üåø Criar Branch
```bash
git checkout -b feature/nova-funcionalidade
# ou
git checkout -b fix/correcao-bug
```

### 3. üíª Desenvolver
- Siga os padr√µes de c√≥digo
- Adicione testes se necess√°rio
- Documente mudan√ßas significativas

### 4. ‚úÖ Testar
```bash
npm test
npm run build-win
```

### 5. üì§ Pull Request
- Descreva as mudan√ßas claramente
- Referencie issues relacionadas
- Aguarde review

## üìã Padr√µes de C√≥digo

### JavaScript
- Use `const`/`let` ao inv√©s de `var`
- Prefira arrow functions
- Use template literals
- Comente c√≥digo complexo

### Commits
```
feat: adicionar nova funcionalidade IA
fix: corrigir bug no martingale
docs: atualizar documenta√ß√£o
style: formata√ß√£o de c√≥digo
```

### Issues
- Use templates dispon√≠veis
- Seja espec√≠fico e detalhado
- Inclua steps para reproduzir bugs

## üß™ Testes

### Executar Testes
```bash
npm test
```

### Adicionar Testes
```javascript
test('‚úÖ Nova funcionalidade', () => {
  // Seu teste aqui
});
```

## üìù Documenta√ß√£o

- Atualize README.md se necess√°rio
- Documente APIs novas
- Adicione exemplos de uso

## üöÄ √Åreas Priorit√°rias

1. **üß† Melhorias na IA**
   - Algoritmos mais sofisticados
   - Otimiza√ß√£o de performance
   - Novos indicadores

2. **üé® Interface**
   - Melhorias de UX
   - Novos temas
   - Responsividade

3. **üìä Analytics**
   - Relat√≥rios avan√ßados
   - Visualiza√ß√µes
   - Exporta√ß√£o de dados

4. **üîß Infraestrutura**
   - Otimiza√ß√µes de build
   - CI/CD melhorias
   - Documenta√ß√£o

## ‚ùì D√∫vidas?

- Abra uma issue
- Entre no Discord
- Envie email para dev@iatrading.com

Obrigado por contribuir! üôè